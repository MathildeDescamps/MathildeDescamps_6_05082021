[{"/Users/mathildedescamps/Documents/Professionnel/Alternance/openclassrooms/P6/fisheye/src/index.js":"1","/Users/mathildedescamps/Documents/Professionnel/Alternance/openclassrooms/P6/fisheye/src/components/App.js":"2","/Users/mathildedescamps/Documents/Professionnel/Alternance/openclassrooms/P6/fisheye/src/data/data.js":"3","/Users/mathildedescamps/Documents/Professionnel/Alternance/openclassrooms/P6/fisheye/src/components/Photograph.js":"4","/Users/mathildedescamps/Documents/Professionnel/Alternance/openclassrooms/P6/fisheye/src/components/Banner.js":"5","/Users/mathildedescamps/Documents/Professionnel/Alternance/openclassrooms/P6/fisheye/src/components/Intro.js":"6","/Users/mathildedescamps/Documents/Professionnel/Alternance/openclassrooms/P6/fisheye/src/components/Gallery.js":"7","/Users/mathildedescamps/Documents/Professionnel/Alternance/openclassrooms/P6/fisheye/src/components/Medias.js":"8","/Users/mathildedescamps/Documents/Professionnel/Alternance/openclassrooms/P6/fisheye/src/components/GalleryLightbox.js":"9","/Users/mathildedescamps/Documents/Professionnel/Alternance/openclassrooms/P6/fisheye/src/components/Sticker.js":"10","/Users/mathildedescamps/Documents/Professionnel/Alternance/openclassrooms/P6/fisheye/src/components/Home.js":"11"},{"size":232,"mtime":1630589445982,"results":"12","hashOfConfig":"13"},{"size":767,"mtime":1636625071033,"results":"14","hashOfConfig":"13"},{"size":15519,"mtime":1636105339722,"results":"15","hashOfConfig":"13"},{"size":721,"mtime":1633272464518,"results":"16","hashOfConfig":"13"},{"size":305,"mtime":1631881354280,"results":"17","hashOfConfig":"13"},{"size":2144,"mtime":1636105343012,"results":"18","hashOfConfig":"13"},{"size":1572,"mtime":1633272520851,"results":"19","hashOfConfig":"13"},{"size":15023,"mtime":1637325721269,"results":"20","hashOfConfig":"13"},{"size":212,"mtime":1633007884020,"results":"21","hashOfConfig":"13"},{"size":872,"mtime":1633272794902,"results":"22","hashOfConfig":"13"},{"size":3621,"mtime":1637327845035,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"swfm0y",{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"26"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},"/Users/mathildedescamps/Documents/Professionnel/Alternance/openclassrooms/P6/fisheye/src/index.js",[],["52","53"],"/Users/mathildedescamps/Documents/Professionnel/Alternance/openclassrooms/P6/fisheye/src/components/App.js",[],"/Users/mathildedescamps/Documents/Professionnel/Alternance/openclassrooms/P6/fisheye/src/data/data.js",[],"/Users/mathildedescamps/Documents/Professionnel/Alternance/openclassrooms/P6/fisheye/src/components/Photograph.js",["54","55","56"],"import Intro from './Intro';\nimport Gallery from './Gallery';\n\nfunction Photograph(props) {\n\n    let idUrl = window.location.pathname.slice(9);\n    let photographers = props.photographers;\n    let medias = props.medias;\n    let profile;\n    let profileId;\n    let i;\n\n    photographers.map((photograph, index) => {\n        if(photograph.id.toString() == idUrl) {\n            profile = photograph;\n            i = index;\n            profileId = profile.id;\n        }\n    })\n    return (\n        <div className=\"profilePage\">\n            <Intro url={props.url} profile={profile} index={i}/>\n            <Gallery profileId={profile.id} profile={profile} medias={medias} />\n        </div>\n    );\n}\n\nexport default Photograph;","/Users/mathildedescamps/Documents/Professionnel/Alternance/openclassrooms/P6/fisheye/src/components/Banner.js",[],"/Users/mathildedescamps/Documents/Professionnel/Alternance/openclassrooms/P6/fisheye/src/components/Intro.js",[],"/Users/mathildedescamps/Documents/Professionnel/Alternance/openclassrooms/P6/fisheye/src/components/Gallery.js",["57"],"import { useState } from \"react\";\nimport * as _ from \"lodash\";\nimport Medias from \"./Medias\";\nimport Sticker from './Sticker';\n\nfunction Gallery(props) {\n\n    let medias = props.medias;\n    //Le filtre est sur 'popularité' par défaut :\n    const [filter, setFilter] = useState('likes');\n    //On ordonne les médias du plus populaire au moins populaire :\n    const [items, setItems] = useState(_.orderBy([...medias.filter(media => media.photographerId == props.profileId)], ['likes'], 'desc'));\n    \n    return(\n        <>\n            <div className=\"gallery-wrapper\">\n                <div className=\"filter\">\n                    <p>Trier par</p> \n                    <select \n                        id=\"filter\" \n                        value={filter} \n                        //Quand le filtre change, on met à jour l'odre des medias:\n                        onChange={e => {\n                            setFilter(e.target.value);\n                            setItems(_.orderBy([...items], [e.target.value], filter === 'title' ? 'asc' : 'desc'));\n                        }}\n                    >\n                        <option value='likes' defaultValue>Popularité</option>\n                        <option value='date'>Date</option>\n                        <option value='title'>Titre</option>\n                    </select>\n                </div>\n            <Medias profile={props.profile} name={props.profile.name} medias={items} />\n            </div>\n            <Sticker income={props.profile.price} medias={items}/>\n        </>\n    )\n}\n\nexport default Gallery;","/Users/mathildedescamps/Documents/Professionnel/Alternance/openclassrooms/P6/fisheye/src/components/Medias.js",["58","59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82"],"import { indexOf } from \"lodash\";\nimport { useState } from \"react\";\n\nfunction Medias(props) {\n\n    let medias = props.medias;\n    let mediaFolder = props.name.split(\" \")[0];\n    let currentIndex;\n\n    //State that defines whether the lightbox is displayed or not :\n    const [lightboxDisplay, setLightBoxDisplay] = useState(false);\n\n    //State that defines which media has to be displayed : \n    const [mediaToShow, setMediaToShow] = useState('');\n\n    const [mediaTitle, setMediaTitle] = useState('');\n\n    //FUNCTION : DISPLAY THE IMAGE THAT WAS CLICKED\n    const showImage = (src, title) => {\n        //set imageToShow to be the one that's been clicked on    \n        setMediaToShow(src);\n        setMediaTitle(title);\n        //set lightbox visibility to true\n        setLightBoxDisplay(true);\n    };\n\n    //FUNCTION : CLOSE THE LIGHTBOX :\n    const hideLightBox = () => {\n        setLightBoxDisplay(false)\n    }\n\n    //FUNCTION : SHOW THE NEXT MEDIA :\n    const showNext = (mediaSrc) => {\n        //We put all the medias of the gallery in an array, to get the one that is currently displayed, and set the next media to be displayed.\n        let currentMedias = document.querySelectorAll('.gallery-media');\n        let arrayOfMedias = Array.from(currentMedias);\n        let mediaDisplayed;\n        let nextMedia;\n        let newSrc;\n        //We find the media that is currently displayed\n        arrayOfMedias.map((media)=> {\n            //CHECK IN THE IMAGES :\n            if(media.nodeName == 'IMG' && media.attributes.src.nodeValue == mediaSrc) {\n                mediaDisplayed = media;\n                //  As the id of a media equals its index in the array, \n                //  we turn it into an integer and increment it to get the index of the next media\n                let currentId = parseInt(mediaDisplayed.id);\n                let nextId = currentId+1;\n                let idToString = nextId.toString();\n                nextMedia = document.getElementById(idToString);\n                //If there is no more media to display, we close the lightbox.\n                if(!nextMedia) {\n                    hideLightBox()\n                } \n                //If next media is an image, we set its source to display it.\n                else if (nextMedia.nodeName == \"IMG\") {\n                    newSrc = nextMedia.src.substr(21);\n                    //We define the next media to be displayed\n                    setMediaToShow(newSrc);\n                    setMediaTitle(nextMedia.alt);\n                } \n                //If next media is a video, we set\n                else if (nextMedia.nodeName == \"VIDEO\") {\n                    let videoSrc = document.querySelector(\"[id='\"+nextMedia.id+\"'] .source\").src;\n                    setMediaToShow(videoSrc);\n                    setMediaTitle(nextMedia.alt);\n                }\n            }\n            //CHECK IN THE VIDEOS \n            else if(media.nodeName == 'VIDEO') {\n                //If currently displayed media is a video : \n                let videoSrc = document.querySelector(\".source\").src.substr(21);\n                if(videoSrc && (videoSrc == mediaSrc.substr(21) || videoSrc == mediaSrc)) {\n                    mediaDisplayed = media;\n                    //As the id of a media equals its index in the array, \n                    //we turn it into an integer and increment it to get the index of the next media\n                    let currentId = parseInt(mediaDisplayed.id);\n                    let nextId = currentId+1;\n                    let idToString = nextId.toString();\n                    nextMedia = document.getElementById(idToString);\n                    //If there is no more media to display, we close the lightbox.\n                    if(!nextMedia) {\n                        hideLightBox();\n                    } \n                    //If next media is an image, we set its source to display it.\n                    else if (nextMedia.nodeName == \"IMG\") {\n                        newSrc = nextMedia.src.substr(21);\n                        //We define the next media to be displayed\n                        setMediaToShow(newSrc);\n                        setMediaTitle(nextMedia.alt);\n                    } \n                    //If next media is a video, we set\n                    else if (nextMedia.nodeName == \"VIDEO\") {\n                        let videoSrc = document.querySelector(\"[id='\"+nextMedia.id+\"'] .source\").src;\n                        setMediaToShow(videoSrc);\n                        setMediaTitle(nextMedia.alt);\n                    }\n                }\n            }\n        })\n    }\n//\n    //FUNCTION : SHOW THE PREVIOUS MEDIA :\n    const showPrevious = (mediaSrc) => {\n        //We put all the medias of the gallery in an array, to get the one that is currently displayed, and set the previous media to be displayed.\n        let currentMedias = document.querySelectorAll('.gallery-media');\n        let arrayOfMedias = Array.from(currentMedias);\n        let mediaDisplayed;\n        let prevMedia;\n        let newSrc;\n        //We find the media that is currently displayed\n        arrayOfMedias.map((media)=> {\n            //CHECK IN THE IMAGES :\n            if(media && media.nodeName == 'IMG' && media.attributes.src.nodeValue == mediaSrc) {\n                mediaDisplayed = media;\n                //  As the id of a media equals its index in the array, \n                //  we turn it into an integer and increment it to get the index of the previous media\n                let currentId = parseInt(mediaDisplayed.id);\n                let prevId = currentId-1;\n                let idToString = prevId.toString();\n                prevMedia = document.getElementById(idToString);\n                //If there is no more media to display, we close the lightbox.\n                if(currentId === 0) {\n                    hideLightBox();\n                } \n                //If previous media is an image, we set its source to display it.\n                else if (prevMedia.nodeName == \"IMG\") {\n                    newSrc = prevMedia.src.substr(21);\n                    //We define the previous media to be displayed\n                    setMediaToShow(newSrc);\n                    setMediaTitle(prevMedia.alt);\n                } \n                //If previous media is a video, we set\n                else if (prevMedia.nodeName == \"VIDEO\") {\n                    let videoSrc = document.querySelector(\"[id='\"+prevMedia.id+\"'] .source\").src;\n                    setMediaToShow(videoSrc);\n                    setMediaTitle(prevMedia.alt);\n                }\n            }\n            //CHECK IN THE VIDEOS \n            if(media && media.nodeName == 'VIDEO') {\n                let videoSrc = document.querySelector(\".source\").src;\n                if(videoSrc && (videoSrc == mediaSrc.substr(21) || videoSrc == mediaSrc || videoSrc.substr(21) == mediaSrc)) {\n                    mediaDisplayed = media;\n                    //As the id of a media equals its index in the array, \n                    //we turn it into an integer and increment it to get the index of the previous media\n                    let currentId = parseInt(mediaDisplayed.id);\n                    let prevId = currentId-1;\n                    let idToString = prevId.toString();\n                    prevMedia = document.getElementById(idToString);\n                    //If there is no more media to display, we close the lightbox.\n                    if(currentId === 0) {\n                        hideLightBox();\n                    } \n                    //If previous media is an image, we set its source to display it.\n                    else if (prevMedia.nodeName == \"IMG\") {\n                        newSrc = prevMedia.src.substr(21);\n                        //We define the previous media to be displayed\n                        setMediaToShow(newSrc);\n                        setMediaTitle(prevMedia.alt);\n                    } \n                    //If prev media is a video, we set\n                    else if (prevMedia.nodeName == \"VIDEO\") {\n                        let videoSrc = document.querySelector(\"[id='\"+prevMedia.id+\"'] .source\").src;\n                        setMediaToShow(videoSrc);\n                        setMediaTitle(prevMedia.alt);\n                    }\n                }\n            }\n        })\n    }\n\n    return(\n        <>\n            {/* GALLERY OF MEDIAS */}\n            <div className=\"gallery\">\n                {   \n                    medias.map((media, index)=> {\n                        /* If the media is an image, we display it with an <img/> element */\n                        if(media.image) {\n                            return (\n                                <div key={index} className=\"media\">\n                                    <img    src={process.env.PUBLIC_URL + '/' + mediaFolder + '/' + media.image} \n                                            alt={media.title} \n                                            className=\"gallery-media\" \n                                            id={index}\n                                            onClick={() => {\n                                                showImage(process.env.PUBLIC_URL + '/' + mediaFolder + '/' + media.image, media.title);\n                                                currentIndex = index;\n                                            }}\n                                    />\n                                    <div className=\"media-infos\">\n                                        <p>{media.title}</p>\n                                        <div className=\"likes\">\n                                            <p>{media.likes}</p>\n                                            <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"18px\" viewBox=\"0 0 24 24\" width=\"18px\" fill=\"#901C1C\"><path d=\"M0 0h24v24H0V0z\" fill=\"none\"/><path d=\"M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z\"/></svg>\n                                        </div>\n                                    </div>\n                                </div>\n                            )\n                        /* If the media is a video instead of an image, we display it with a <video> element */\n                        } else if(media.video) {\n                            return (\n                                <div key={index} className=\"media\">\n                                    <video  autoPlay \n                                            type=\"video\" \n                                            controls \n                                            height=\"300\"\n                                            alt={media.title}\n                                            className=\"gallery-media\" \n                                            id={index} \n                                            onClick={() => {\n                                                showImage(process.env.PUBLIC_URL + '/' + mediaFolder + '/' + media.video, media.title);\n                                            }} \n                                    >\n                                        <source src={process.env.PUBLIC_URL + '/' + mediaFolder + '/' + media.video} type=\"video/mp4\" className=\"source\"/>\n                                        Sorry, your browser doesn't support embedded videos.\n                                    </video>\n                                    <div className=\"media-infos\">\n                                        <p>{media.title}</p>\n                                        <div className=\"likes\" aria-label=\"likes\">\n                                            <p>{media.likes}</p>\n                                            <svg aria-label=\"heart icon\" xmlns=\"http://www.w3.org/2000/svg\" height=\"18px\" viewBox=\"0 0 24 24\" width=\"18px\" fill=\"#901C1C\"><path d=\"M0 0h24v24H0V0z\" fill=\"none\"/><path d=\"M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z\"/></svg>\n                                        </div>\n                                    </div>\n                                </div>\n                            )\n                        }\n                    })\n                }     \n            </div>\n\n            {/* LIGHTBOX */}\n            { lightboxDisplay &&\n                <div id=\"lightbox\" onClick={hideLightBox}>\n\n                    {/* Cross button to close the lightbox */}\n                    <svg className=\"cross-icon\" onClick={hideLightBox} width=\"25\" height=\"25\" viewBox=\"0 0 42 42\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path d=\"M42 4.23L37.77 0L21 16.77L4.23 0L0 4.23L16.77 21L0 37.77L4.23 42L21 25.23L37.77 42L42 37.77L25.23 21L42 4.23Z\" fill=\"#901C1C\"/>\n                    </svg>\n\n                    {/* Left arrow button to display the previous media */}\n                    <button className=\"previous\" onClick={(e) => {\n                                                                                e.stopPropagation();\n                                                                                showPrevious(mediaToShow);\n                                                                            }} \n                    >\n                        <svg width=\"25\" viewBox=\"0 0 30 48\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                            <path d=\"M29.6399 42.36L11.3199 24L29.6399 5.64L23.9999 -2.46532e-07L-0.000107861 24L23.9999 48L29.6399 42.36Z\" fill=\"#901C1C\"/>\n                        </svg>\n                    </button>\n\n                    {/* Media that is displayed in the lightbox */}\n                    <div className=\"media\">\n                        {mediaToShow.slice(mediaToShow.length -4) === '.mp4' ?\n                            <video autoPlay muted controls height=\"300\">\n                                <source src={mediaToShow} type=\"video/mp4\" className=\"source\"/>\n                                Sorry, your browser doesn't support embedded videos.\n                            </video>\n                        :\n                            <img id=\"lightbox-img\" src={mediaToShow} />\n                        }\n                        <p>{mediaTitle}</p>\n                    </div>\n\n                    {/* Right arrow button to display the next media */}\n                    <button className=\"next\" onClick={(e) => {\n                                e.stopPropagation();\n                                showNext(mediaToShow);\n                            }} >\n                        <svg width=\"25\" viewBox=\"0 0 30 48\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                            <path d=\"M0.360108 5.64L18.6801 24L0.360107 42.36L6.00011 48L30.0001 24L6.00011 3.88195e-06L0.360108 5.64Z\" fill=\"#901C1C\"/>\n                        </svg>\n                    </button>\n\n                </div>\n            }\n        </>\n    )\n}\n\nexport default Medias;","/Users/mathildedescamps/Documents/Professionnel/Alternance/openclassrooms/P6/fisheye/src/components/GalleryLightbox.js",[],"/Users/mathildedescamps/Documents/Professionnel/Alternance/openclassrooms/P6/fisheye/src/components/Sticker.js",["83"],"function Sticker(props) {\n\n    let totalLikes = 0;\n    props.medias.map((media) => {\n        totalLikes = totalLikes + media.likes;\n    })\n\n    return (\n        <div className=\"sticker-wrapper\">\n            <div className=\"sticker\">\n                <p className=\"likes\">\n                    {totalLikes}\n                    <span>\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"20px\" viewBox=\"0 0 24 24\" width=\"20px\" fill=\"#000000\"><path d=\"M0 0h24v24H0V0z\" fill=\"none\"/><path d=\"M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z\"/></svg>\n                    </span>\n                </p>\n                <p className=\"income\">{props.income}€ / jour</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Sticker;","/Users/mathildedescamps/Documents/Professionnel/Alternance/openclassrooms/P6/fisheye/src/components/Home.js",["84"],"import React from \"react\";\nimport {Link} from \"react-router-dom\";\nimport { useState, useEffect } from \"react\";\nimport logo from '../assets/logo.png';\n\nconst tags = ['portrait', 'art', 'fashion', 'architecture', 'travel', 'sports', 'animals', 'events'];\n\nfunction Home(props) {\n\n    let photographers = props.photographers;\n    const [tagFilter, setTagFilter] = useState('all');\n    const [showButton, setShowButton] = useState(false);\n\n    const displayTaggedPhotographers = (tag) => {\n        setTagFilter(tag);\n    }\n\n    \n  useEffect(() => {\n    window.addEventListener(\"scroll\", () => {\n      if (window.pageYOffset > 100) {\n        setShowButton(true);\n      } else {\n        setShowButton(false);\n      }\n    });\n  }, []);\n\n  // This function will scroll the window to the top \n  const scrollToTop = () => {\n    window.scrollTo({\n      top: 0,\n      behavior: 'smooth' // for smoothly scrolling\n    });\n  };\n\n    return (\n        <>\n            {showButton && (\n                <div className=\"backToTop\">\n                    <button onClick={scrollToTop} className=\"back-to-top\">\n                        Passer au contenu\n                    </button>\n                </div>\n            )}\n            <header>\n                <Link to={'/'} onClick={ () => { setTagFilter('all') } }>\n                    <img src={logo} alt='FishEye Home page' className='logo'/>\n                </Link>\n                <nav>\n                    <ul className='nav-tags'>\n                        {tags.map((tag, index) => {\n                            return  <li key={index} onClick={ () => { displayTaggedPhotographers(tag) } } tabIndex=\"0\" aria-label={tag} >#{tag}</li>\n                        })}\n                    </ul>\n                </nav>\n            </header>\n            <main>\n                <h1>Nos photographes</h1>\n                <section id=\"photographs\">\n                    {photographers.map((photograph, index) => {\n                        if(tagFilter === 'all' || photograph.tags.includes(tagFilter)) {\n                            return (\n                                <div className=\"photograph\" key={index} >\n                                    <div className=\"photograph-container\">\n                                        <Link to={'/profile/'+photograph.id} >\n                                            <img src={props.url + 'photographers-profile-pics/' + photograph.portrait } alt={photograph.name} />\n                                            <h2 className=\"name\">{photograph.name}</h2>\n                                        </Link>\n                                        <p className=\"location\">{photograph.city + ', ' + photograph.country}</p>\n                                        <p className=\"tagline\">{photograph.tagline}</p>\n                                        <p className=\"price\">{photograph.price}€ / jour</p>\n                                        <ul className=\"taglist\">\n                                            {photograph.tags.map((tag, i) => {\n                                                return (  \n                                                    <li key={i} onClick={ () => { displayTaggedPhotographers(tag) } } tabIndex=\"0\" aria-label={tag}>#{tag}</li>\n                                                )\n                                            })}\n                                        </ul>\n                                    </div>\n                                </div>\n                            )  \n                        }\n                    })}\n                </section>\n            </main>\n        </>\n    )\n}\n\nexport default Home;",{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","replacedBy":"88"},{"ruleId":"89","severity":1,"message":"90","line":10,"column":9,"nodeType":"91","messageId":"92","endLine":10,"endColumn":18},{"ruleId":"93","severity":1,"message":"94","line":13,"column":43,"nodeType":"95","messageId":"96","endLine":13,"endColumn":45},{"ruleId":"97","severity":1,"message":"98","line":14,"column":37,"nodeType":"99","messageId":"100","endLine":14,"endColumn":39},{"ruleId":"97","severity":1,"message":"98","line":12,"column":98,"nodeType":"99","messageId":"100","endLine":12,"endColumn":100},{"ruleId":"89","severity":1,"message":"101","line":1,"column":10,"nodeType":"91","messageId":"92","endLine":1,"endColumn":17},{"ruleId":"89","severity":1,"message":"102","line":8,"column":9,"nodeType":"91","messageId":"92","endLine":8,"endColumn":21},{"ruleId":"93","severity":1,"message":"94","line":41,"column":34,"nodeType":"95","messageId":"96","endLine":41,"endColumn":36},{"ruleId":"97","severity":1,"message":"98","line":43,"column":31,"nodeType":"99","messageId":"100","endLine":43,"endColumn":33},{"ruleId":"97","severity":1,"message":"98","line":43,"column":74,"nodeType":"99","messageId":"100","endLine":43,"endColumn":76},{"ruleId":"97","severity":1,"message":"98","line":56,"column":45,"nodeType":"99","messageId":"100","endLine":56,"endColumn":47},{"ruleId":"97","severity":1,"message":"98","line":63,"column":45,"nodeType":"99","messageId":"100","endLine":63,"endColumn":47},{"ruleId":"97","severity":1,"message":"98","line":70,"column":36,"nodeType":"99","messageId":"100","endLine":70,"endColumn":38},{"ruleId":"97","severity":1,"message":"98","line":73,"column":42,"nodeType":"99","messageId":"100","endLine":73,"endColumn":44},{"ruleId":"97","severity":1,"message":"98","line":73,"column":77,"nodeType":"99","messageId":"100","endLine":73,"endColumn":79},{"ruleId":"97","severity":1,"message":"98","line":86,"column":49,"nodeType":"99","messageId":"100","endLine":86,"endColumn":51},{"ruleId":"97","severity":1,"message":"98","line":93,"column":49,"nodeType":"99","messageId":"100","endLine":93,"endColumn":51},{"ruleId":"93","severity":1,"message":"94","line":112,"column":34,"nodeType":"95","messageId":"96","endLine":112,"endColumn":36},{"ruleId":"97","severity":1,"message":"98","line":114,"column":40,"nodeType":"99","messageId":"100","endLine":114,"endColumn":42},{"ruleId":"97","severity":1,"message":"98","line":114,"column":83,"nodeType":"99","messageId":"100","endLine":114,"endColumn":85},{"ruleId":"97","severity":1,"message":"98","line":127,"column":45,"nodeType":"99","messageId":"100","endLine":127,"endColumn":47},{"ruleId":"97","severity":1,"message":"98","line":134,"column":45,"nodeType":"99","messageId":"100","endLine":134,"endColumn":47},{"ruleId":"97","severity":1,"message":"98","line":141,"column":40,"nodeType":"99","messageId":"100","endLine":141,"endColumn":42},{"ruleId":"97","severity":1,"message":"98","line":143,"column":42,"nodeType":"99","messageId":"100","endLine":143,"endColumn":44},{"ruleId":"97","severity":1,"message":"98","line":143,"column":77,"nodeType":"99","messageId":"100","endLine":143,"endColumn":79},{"ruleId":"97","severity":1,"message":"98","line":143,"column":112,"nodeType":"99","messageId":"100","endLine":143,"endColumn":114},{"ruleId":"97","severity":1,"message":"98","line":156,"column":49,"nodeType":"99","messageId":"100","endLine":156,"endColumn":51},{"ruleId":"97","severity":1,"message":"98","line":163,"column":49,"nodeType":"99","messageId":"100","endLine":163,"endColumn":51},{"ruleId":"93","severity":1,"message":"103","line":178,"column":46,"nodeType":"95","messageId":"104","endLine":178,"endColumn":48},{"ruleId":"105","severity":1,"message":"106","line":261,"column":29,"nodeType":"107","endLine":261,"endColumn":72},{"ruleId":"93","severity":1,"message":"94","line":4,"column":30,"nodeType":"95","messageId":"96","endLine":4,"endColumn":32},{"ruleId":"93","severity":1,"message":"103","line":61,"column":60,"nodeType":"95","messageId":"104","endLine":61,"endColumn":62},"no-native-reassign",["108"],"no-negated-in-lhs",["109"],"no-unused-vars","'profileId' is assigned a value but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'indexOf' is defined but never used.","'currentIndex' is assigned a value but never used.","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]